const DEEPSEEK_API_KEY = "sk-8c8051f46dd84677b6f008887eadbf54";
const API_URL = "https://api.deepseek.com/v1/chat/completions";

const russianToEnglishCardMap = {
  "–ú–∞–≥": "the-magician",
  "–ñ—Ä–∏—Ü–∞": "the-high-priestess",
  "–ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞": "the-empress",
  "–ò–º–ø–µ—Ä–∞—Ç–æ—Ä": "the-emperor",
  "–ñ—Ä–µ—Ü": "the-hierophant",
  "–õ—é–±–æ–≤–Ω–∏–∫": "the-lovers",
  "–ö–æ–ª–µ—Å–Ω–∏—Ü–∞": "the-chariot",
  "–°–∏–ª–∞": "strength",
  "–ü—Ä–∞–≤–æ—Å—É–¥–∏–µ": "justice",
  "–û—Ç—à–µ–ª—å–Ω–∏–∫": "the-hermit",
  "–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã": "the-wheel-of-fortune",
  "–ü–æ–≤–µ—à–µ–Ω–Ω—ã–π": "the-hanged-man",
  "–°–º–µ—Ä—Ç—å": "death",
  "–£–º–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å": "temperance",
  "–î—å—è–≤–æ–ª": "the-devil",
  "–ë–∞—à–Ω—è": "the-tower",
  "–ó–≤–µ–∑–¥–∞": "the-star",
  "–õ—É–Ω–∞": "the-moon",
  "–°–æ–ª–Ω—Ü–µ": "the-sun",
  "–°—É–¥": "judgement",
  "–ú–∏—Ä": "the-world",
  "–¢—É–∑ –∂–µ–∑–ª–æ–≤": "ace-of-wands",
  "–î–≤–æ–π–∫–∞ –∂–µ–∑–ª–æ–≤": "two-of-wands",
  "–¢—Ä–æ–π–∫–∞ –∂–µ–∑–ª–æ–≤": "three-of-wands",
  "–ß–µ—Ç–≤—ë—Ä–∫–∞ –∂–µ–∑–ª–æ–≤": "four-of-wands",
  "–ü—è—Ç—ë—Ä–∫–∞ –∂–µ–∑–ª–æ–≤": "five-of-wands",
  "–®–µ—Å—Ç—ë—Ä–∫–∞ –∂–µ–∑–ª–æ–≤": "six-of-wands",
  "–°–µ–º—ë—Ä–∫–∞ –∂–µ–∑–ª–æ–≤": "seven-of-wands",
  "–í–æ—Å—å–º—ë—Ä–∫–∞ –∂–µ–∑–ª–æ–≤": "eight-of-wands",
  "–î–µ–≤—è—Ç–∫–∞ –∂–µ–∑–ª–æ–≤": "nine-of-wands",
  "–î–µ—Å—è—Ç–∫–∞ –∂–µ–∑–ª–æ–≤": "ten-of-wands",
  "–¢—É–∑ –∫—É–±–∫–æ–≤": "ace-of-cups",
  "–î–≤–æ–π–∫–∞ –∫—É–±–∫–æ–≤": "two-of-cups",
  "–¢—Ä–æ–π–∫–∞ –∫—É–±–∫–æ–≤": "three-of-cups",
  "–ß–µ—Ç–≤—ë—Ä–∫–∞ –∫—É–±–∫–æ–≤": "four-of-cups",
  "–ü—è—Ç—ë—Ä–∫–∞ –∫—É–±–∫–æ–≤": "five-of-cups",
  "–®–µ—Å—Ç—ë—Ä–∫–∞ –∫—É–±–∫–æ–≤": "six-of-cups",
  "–°–µ–º—ë—Ä–∫–∞ –∫—É–±–∫–æ–≤": "seven-of-cups",
  "–í–æ—Å—å–º—ë—Ä–∫–∞ –∫—É–±–∫–æ–≤": "eight-of-cups",
  "–î–µ–≤—è—Ç–∫–∞ –∫—É–±–∫–æ–≤": "nine-of-cups",
  "–î–µ—Å—è—Ç–∫–∞ –∫—É–±–∫–æ–≤": "ten-of-cups",
  "–¢—É–∑ –º–µ—á–µ–π": "ace-of-swords",
  "–î–≤–æ–π–∫–∞ –º–µ—á–µ–π": "two-of-swords",
  "–¢—Ä–æ–π–∫–∞ –º–µ—á–µ–π": "three-of-swords",
  "–ß–µ—Ç–≤—ë—Ä–∫–∞ –º–µ—á–µ–π": "four-of-swords",
  "–ü—è—Ç—ë—Ä–∫–∞ –º–µ—á–µ–π": "five-of-swords",
  "–®–µ—Å—Ç—ë—Ä–∫–∞ –º–µ—á–µ–π": "six-of-swords",
  "–°–µ–º—ë—Ä–∫–∞ –º–µ—á–µ–π": "seven-of-swords",
  "–í–æ—Å—å–º—ë—Ä–∫–∞ –º–µ—á–µ–π": "eight-of-swords",
  "–î–µ–≤—è—Ç–∫–∞ –º–µ—á–µ–π": "nine-of-swords",
  "–î–µ—Å—è—Ç–∫–∞ –º–µ—á–µ–π": "ten-of-swords",
  "–¢—É–∑ –ø–µ–Ω—Ç–∞–∫–ª–µ–π": "ace-of-pentacles",
  "–î–≤–æ–π–∫–∞ –ø–µ–Ω—Ç–∞–∫–ª–µ–π": "two-of-pentacles",
  "–¢—Ä–æ–π–∫–∞ –ø–µ–Ω—Ç–∞–∫–ª–µ–π": "three-of-pentacles",
  "–ß–µ—Ç–≤—ë—Ä–∫–∞ –ø–µ–Ω—Ç–∞–∫–ª–µ–π": "four-of-pentacles",
  "–ü—è—Ç—ë—Ä–∫–∞ –ø–µ–Ω—Ç–∞–∫–ª–µ–π": "five-of-pentacles",
  "–®–µ—Å—Ç—ë—Ä–∫–∞ –ø–µ–Ω—Ç–∞–∫–ª–µ–π": "six-of-pentacles",
  "–°–µ–º—ë—Ä–∫–∞ –ø–µ–Ω—Ç–∞–∫–ª–µ–π": "seven-of-pentacles",
  "–í–æ—Å—å–º—ë—Ä–∫–∞ –ø–µ–Ω—Ç–∞–∫–ª–µ–π": "eight-of-pentacles",
  "–î–µ–≤—è—Ç–∫–∞ –ø–µ–Ω—Ç–∞–∫–ª–µ–π": "nine-of-pentacles",
  "–î–µ—Å—è—Ç–∫–∞ –ø–µ–Ω—Ç–∞–∫–ª–µ–π": "ten-of-pentacles",
  "–ü–∞–∂ –∂–µ–∑–ª–æ–≤": "page-of-wands",
  "–†—ã—Ü–∞—Ä—å –∂–µ–∑–ª–æ–≤": "knight-of-wands",
  "–ö–æ—Ä–æ–ª–µ–≤–∞ –∂–µ–∑–ª–æ–≤": "queen-of-wands",
  "–ö–æ—Ä–æ–ª—å –∂–µ–∑–ª–æ–≤": "king-of-wands",
  "–ü–∞–∂ –∫—É–±–∫–æ–≤": "page-of-cups",
  "–†—ã—Ü–∞—Ä—å –∫—É–±–∫–æ–≤": "knight-of-cups",
  "–ö–æ—Ä–æ–ª–µ–≤–∞ –∫—É–±–∫–æ–≤": "queen-of-cups",
  "–ö–æ—Ä–æ–ª—å –∫—É–±–∫–æ–≤": "king-of-cups",
  "–ü–∞–∂ –º–µ—á–µ–π": "page-of-swords",
  "–†—ã—Ü–∞—Ä—å –º–µ—á–µ–π": "knight-of-swords",
  "–ö–æ—Ä–æ–ª–µ–≤–∞ –º–µ—á–µ–π": "queen-of-swords",
  "–ö–æ—Ä–æ–ª—å –º–µ—á–µ–π": "king-of-swords",
  "–ü–∞–∂ –ø–µ–Ω—Ç–∞–∫–ª–µ–π": "page-of-pentacles",
  "–†—ã—Ü–∞—Ä—å –ø–µ–Ω—Ç–∞–∫–ª–µ–π": "knight-of-pentacles",
  "–ö–æ—Ä–æ–ª–µ–≤–∞ –ø–µ–Ω—Ç–∞–∫–ª–µ–π": "queen-of-pentacles",
  "–ö–æ—Ä–æ–ª—å –ø–µ–Ω—Ç–∞–∫–ª–µ–π": "king-of-pentacles"
};

const questionInput = document.getElementById('question');
const resultDiv = document.getElementById('result');
const cardsContainer = document.getElementById('cards');
const interpretationEl = document.getElementById('interpretation');

const nameInput = document.getElementById('name');
const birthDateInput = document.getElementById('birth-date');

const clearBtn = document.getElementById('clear');
const shortDrawBtn = document.getElementById('short-draw');
const fullDrawBtn = document.getElementById('full-draw');
const voiceBtn = document.getElementById('voice-input');

if (clearBtn) {
  clearBtn.addEventListener('click', () => {
    questionInput.value = '';
    nameInput.value = '';
    birthDateInput.value = '';
  });
}

if (shortDrawBtn) {
  shortDrawBtn.addEventListener('click', () => {
    const question = questionInput.value.trim();
    if (!question) return alert('–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å!');
    makeTarotReading(question, 3);
  });
}

if (fullDrawBtn) {
  fullDrawBtn.addEventListener('click', () => {
    const question = questionInput.value.trim();
    if (!question) return alert('–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å!');
    makeTarotReading(question, 5);
  });
}

if (voiceBtn) {
  let isListening = false;

  voiceBtn.addEventListener('click', () => {
    if (isListening) return;

    isListening = true;
    voiceBtn.innerText = 'üéôÔ∏è –°–ª—É—à–∞—é...';
    voiceBtn.style.background = '#e74c3c';

    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    if (!SpeechRecognition) {
      alert('–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ.');
      isListening = false;
      voiceBtn.innerText = 'üéôÔ∏è –ì–æ–ª–æ—Å';
      voiceBtn.style.background = '#2ecc71';
      return;
    }

    const recognition = new SpeechRecognition();
    recognition.lang = 'ru-RU';
    recognition.interimResults = false;
    recognition.maxAlternatives = 1;

    recognition.onresult = (event) => {
      const transcript = event.results[0][0].transcript;
      questionInput.value = transcript;
      isListening = false;
      voiceBtn.innerText = 'üéôÔ∏è –ì–æ–ª–æ—Å';
      voiceBtn.style.background = '#2ecc71';
    };

    recognition.onerror = (event) => {
      console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:', event.error);
      isListening = false;
      voiceBtn.innerText = 'üéôÔ∏è –ì–æ–ª–æ—Å';
      voiceBtn.style.background = '#2ecc71';
      alert('–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞: ' + event.error);
    };

    recognition.onend = () => {
      if (isListening) recognition.start();
    };

    recognition.start();
  });
}

async function makeTarotReading(question, cardCount) {
  const button = shortDrawBtn === document.activeElement ? shortDrawBtn : fullDrawBtn;
  if (button) {
    button.disabled = true;
    button.innerText = 'üîÆ –î–µ–ª–∞—é —Ä–∞—Å–∫–ª–∞–¥...';
  }

  try {
    const context = [
      `–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${nameInput.value.trim() || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}`,
      `–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ${birthDateInput.value.trim() || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`,
      `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç: ${cardCount}`
    ].filter(line => line).join('\n');

    const response = await fetch(API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${DEEPSEEK_API_KEY}`
      },
      body: JSON.stringify({
        model: "deepseek-chat",
        messages: [
          {
            role: "system",
            content: `–¢—ã ‚Äî –º–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å–∫–ª–∞–¥—á–∏–∫ –¢–∞—Ä–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –û—Ç–≤–µ—á–∞–π **–¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ**.
              –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–æ –∑–≤—É—á–∏—Ç –∫—Ä–∞—Å–∏–≤–æ –∏–ª–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ.
              –ï—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –æ–±—ä—è—Å–Ω–∏—Ç—å –ø–æ–Ω—è—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, "fulfillment", "consciousness"), 
              –∑–∞–º–µ–Ω–∏ –µ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç: "—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ", "–æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å", "–≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ", "–¥—É—Ö–æ–≤–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ" –∏ —Ç.–ø.
              –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å: "${question}".
              –£ –Ω–µ–≥–æ –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
              ${context}
              –í –æ—Ç–≤–µ—Ç–µ –≤–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON –≤ —Ñ–æ—Ä–º–∞—Ç–µ: { ... } –±–µ–∑ –∫–æ–¥–∏—Ä–æ–≤–æ–∫, –æ–±—ë—Ä—Ç–æ–∫, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤. –ù–∏–∫–∞–∫–∏—Ö \`\`\`json, –Ω–∏–∫–∞–∫–∏—Ö #, –Ω–∏–∫–∞–∫–∏—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.
              –§–æ—Ä–º–∞—Ç:
              {
                "cards": ["–Ω–∞–∑–≤–∞–Ω–∏–µ1", "–Ω–∞–∑–≤–∞–Ω–∏–µ2", ...],
                "interpretation": "–∫—Ä–∞—Ç–∫–æ–µ –æ–±–æ–±—â–µ–Ω–∏–µ",
                "detailed": {
                  "card1": {
                    "name": "–Ω–∞–∑–≤–∞–Ω–∏–µ",
                    "meaning": "–ø–æ–¥—Ä–æ–±–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ",
                    "insight": "—á—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç —Å–µ–π—á–∞—Å",
                    "advice": "—Å–æ–≤–µ—Ç"
                  },
                  "card2": { ... }
                },
                "overall": "–û–±—â–∏–π –≤—ã–≤–æ–¥ —Å —Å–æ–≤–µ—Ç–∞–º–∏: ... (5-10 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –≥–ª—É–±–æ–∫–æ, —Å —ç–º–ø–∞—Ç–∏–µ–π)"
              }
              –ù–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ä—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º: –ú–∞–≥, –ñ—Ä–∏—Ü–∞, –ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞, –ò–º–ø–µ—Ä–∞—Ç–æ—Ä, –ñ—Ä–µ—Ü, –õ—é–±–æ–≤–Ω–∏–∫, –ö–æ–ª–µ—Å–Ω–∏—Ü–∞, –°–∏–ª–∞, –ü—Ä–∞–≤–æ—Å—É–¥–∏–µ, –ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã, –û—Ç—à–µ–ª—å–Ω–∏–∫, –°–º–µ—Ä—Ç—å, –£–º–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å, –î—å—è–≤–æ–ª, –ë–∞—à–Ω—è, –ó–≤–µ–∑–¥–∞, –õ—É–Ω–∞, –°–æ–ª–Ω—Ü–µ, –°—É–¥, –ú–∏—Ä, –¢—É–∑ –∂–µ–∑–ª–æ–≤, –î–≤–æ–π–∫–∞ –∫—É–±–∫–æ–≤, –ö–æ—Ä–æ–ª—å –º–µ—á–µ–π –∏ —Ç.–¥.
              –¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≥–ª—É–±–æ–∫–∏–º, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º, —Å —Å–æ–≤–µ—Ç–∞–º–∏.
              –í—Å–µ —Å–ª–æ–≤–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ê–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞ –∑–∞–ø—Ä–µ—â–µ–Ω—ã.
              –ï—Å–ª–∏ —Ç—ã –Ω–µ –∑–Ω–∞–µ—à—å —Ä—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π —Ñ—Ä–∞–∑—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –∫–æ—Ç–æ—Ä–∞—è –ø–µ—Ä–µ–¥–∞—Å—Ç —Å–º—ã—Å–ª.
              `
          },
          {
            role: "user",
            content: `–°–¥–µ–ª–∞–π —Ä–∞—Å–∫–ª–∞–¥ –∏–∑ ${cardCount} –∫–∞—Ä—Ç. –í–æ–ø—Ä–æ—Å: ${question}`
          }
        ],
        temperature: 0.7
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`–û—à–∏–±–∫–∞ API: ${response.status} ‚Äî ${errorText}`);
    }

    const data = await response.json();
    const reply = data.choices[0].message.content;

    console.log("–û—Ç–≤–µ—Ç –æ—Ç –ò–ò:", reply);

    let result;
    try {
      result = JSON.parse(reply);
    } catch (e) {
      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON. –û—Ç–≤–µ—Ç –ò–ò: " + reply);
    }

    if (!result.cards || !Array.isArray(result.cards)) {
      throw new Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: –Ω–µ—Ç –º–∞—Å—Å–∏–≤–∞ –∫–∞—Ä—Ç.");
    }

    cardsContainer.innerHTML = '';
    result.cards.forEach(cardName => {
      const englishFileName = russianToEnglishCardMap[cardName] || cardName.toLowerCase().replace(/[^a-z0-9]/g, '-');
      if (!englishFileName) {
        console.warn(`–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –¥–ª—è –∫–∞—Ä—Ç—ã: ${cardName}`);
        return;
      }

      const div = document.createElement('div');
      div.className = 'card';
      div.style.backgroundImage = `url(assets/cards/${englishFileName}.jpg)`;
      div.title = cardName;

      const nameDiv = document.createElement('div');
      nameDiv.className = 'card-name';
      nameDiv.innerText = cardName;
      div.appendChild(nameDiv);

      cardsContainer.appendChild(div);
    });

    interpretationEl.innerHTML = `<p><strong>üîÆ –û–±—â–µ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ:</strong></p><p>${result.interpretation}</p>`;
    
    if (result.detailed) {
      const detailedDiv = document.createElement('div');
      detailedDiv.innerHTML = '<h3 style="margin-top: 25px; color: #e0d0ff; text-shadow: 0 0 5px #8e44ad;">üìñ –ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç:</h3>';
      Object.values(result.detailed).forEach(card => {
        detailedDiv.innerHTML += `
          <div style="margin: 20px 0; padding: 20px; background: rgba(0,0,0,0.3); border-radius: 15px; border-left: 5px solid #9b59b6; text-align: left;">
            <strong style="color: #f1c40f; font-size: 18px;">${card.name}</strong><br><br>
            <strong>‚ú® –ó–Ω–∞—á–µ–Ω–∏–µ:</strong> ${card.meaning}<br><br>
            <strong>üí° –ß—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç —Å–µ–π—á–∞—Å:</strong> ${card.insight}<br><br>
            <strong>üïäÔ∏è –°–æ–≤–µ—Ç:</strong> ${card.advice}
          </div>
        `;
      });
      interpretationEl.appendChild(detailedDiv);
    }

    if (result.overall) {
      const overallDiv = document.createElement('div');
      overallDiv.innerHTML = `
        <div style="margin: 30px 0; padding: 25px; background: linear-gradient(135deg, #2c163e, #4a2a6a); border-radius: 20px; border: 2px solid #f1c40f; text-align: left; position: relative;">
          <h3 style="color: #f1c40f; margin-bottom: 15px; text-align: center; font-size: 22px;">üåü –û–±—â–∏–π –≤—ã–≤–æ–¥ –∏ —Å–æ–≤–µ—Ç—ã</h3>
          <p style="line-height: 1.8; font-size: 17px;">${result.overall}</p>
          <button id="share-btn" style="margin-top: 20px; padding: 12px 25px; background: #f1c40f; color: #2c163e; border: none; border-radius: 30px; font-weight: bold; cursor: pointer; display: block; margin: 20px auto 0; box-shadow: 0 4px 10px rgba(0,0,0,0.3);">üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–∞—Å–∫–ª–∞–¥–æ–º</button>
        </div>
      `;
      interpretationEl.appendChild(overallDiv);

      document.getElementById('share-btn').addEventListener('click', () => {
        const shareText = `
üîÆ –ú–æ–π —Ä–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ:
–í–æ–ø—Ä–æ—Å: "${question}"

–ö–∞—Ä—Ç—ã: ${result.cards.join(', ')}

–û–±—â–µ–µ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–µ:
${result.interpretation}

üåü –û–±—â–∏–π –≤—ã–≤–æ–¥:
${result.overall}

‚Äî –°–¥–µ–ª–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ "–¢–∞—Ä–æ —Å –ò–ò"
        `.trim();

        if (navigator.share) {
          navigator.share({
            title: '–ú–æ–π —Ä–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ',
            text: shareText,
            url: window.location.href
          }).catch(err => console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è:', err));
        } else {
          navigator.clipboard.writeText(shareText).then(() => {
            alert('–†–∞—Å–∫–ª–∞–¥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω! –ú–æ–∂–µ—Ç–µ –≤—Å—Ç–∞–≤–∏—Ç—å –≤ WhatsApp, Telegram –∏–ª–∏ —Å–æ—Ü—Å–µ—Ç—å.');
          }).catch(err => {
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—Ä—É—á–Ω—É—é –≤—ã–¥–µ–ª–∏—Ç—å —Ç–µ–∫—Å—Ç –≤—ã—à–µ.');
          });
        }
      });
    }

    resultDiv.classList.remove('hidden');

  } catch (error) {
    alert('–û—à–∏–±–∫–∞: ' + error.message);
    console.error(error);
  } finally {
    if (button) {
      button.disabled = false;
      button.innerText = button.id === 'short-draw' ? '–ö—Ä–∞—Ç–∫–∏–π —Ä–∞—Å–∫–ª–∞–¥ (3 –∫–∞—Ä—Ç—ã)' : '–ü–æ–ª–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥ (5 –∫–∞—Ä—Ç)';
    }
  }
}